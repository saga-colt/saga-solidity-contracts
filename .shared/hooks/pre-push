#!/bin/sh
# Shared pre-push hook for dTrinity Hardhat projects

set -eu

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

if ! REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null); then
  echo "${YELLOW}Warning: unable to determine repository root; skipping shared pre-push checks.${NC}"
  exit 0
fi

cd "$REPO_ROOT"

if [ -d "node_modules/.bin" ]; then
  PATH="$REPO_ROOT/node_modules/.bin:$PATH"
fi

SHARED_DIR="$REPO_ROOT/.shared"
BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "")

case "$BRANCH" in
  wip|tmp)
    echo "${YELLOW}Skipping shared pre-push checks for branch: $BRANCH${NC}"
    exit 0
    ;;
  *)
    ;;
esac

HARDHAT_CONFIG_FOUND=0
for candidate in hardhat.config.ts hardhat.config.js hardhat.config.cjs hardhat.config.mjs; do
  if [ -f "$candidate" ]; then
    HARDHAT_CONFIG_FOUND=1
    break
  fi
done

if [ "$HARDHAT_CONFIG_FOUND" -eq 0 ]; then
  echo "${YELLOW}Warning: Hardhat config not found in repository root; skipping shared pre-push checks.${NC}"
  exit 0
fi

run_ts_node_script() {
  script_path="$1"
  shift

  if [ -x "$REPO_ROOT/node_modules/.bin/ts-node" ]; then
    node_modules/.bin/ts-node "$script_path" "$@"
    return $?
  fi

  if command -v ts-node >/dev/null 2>&1; then
    ts-node "$script_path" "$@"
    return $?
  fi

  return 127
}

run_guardrails() {
  if [ ! -f "$SHARED_DIR/scripts/guardrails/check.ts" ]; then
    echo "${YELLOW}Shared guardrail script missing; skipping linting checks.${NC}"
    return 0
  fi

  set -- --fail-fast
  if [ "${SHARED_HARDHAT_PRE_PUSH_PRETTIER:-1}" = "0" ]; then
    set -- "$@" --skip-prettier
    echo "${YELLOW}Skipping Prettier check (set SHARED_HARDHAT_PRE_PUSH_PRETTIER=1 to re-enable).${NC}"
  fi
  if [ "${SHARED_HARDHAT_PRE_PUSH_SOLHINT:-1}" = "0" ]; then
    set -- "$@" --skip-solhint
    echo "${YELLOW}Skipping Solhint check (set SHARED_HARDHAT_PRE_PUSH_SOLHINT=1 to enable).${NC}"
  fi
  if [ "${SHARED_HARDHAT_PRE_PUSH_ESLINT:-1}" = "0" ]; then
    set -- "$@" --skip-eslint
    echo "${YELLOW}Skipping ESLint check (set SHARED_HARDHAT_PRE_PUSH_ESLINT=1 to enable).${NC}"
  fi

  run_ts_node_script "$SHARED_DIR/scripts/guardrails/check.ts" "$@" && return 0

  status=$?
  if [ "$status" -eq 127 ]; then
    echo "${YELLOW}ts-node not available; skipping shared guardrail checks.${NC}"
    return 0
  fi

  return $status
}

run_tests_if_opt_in() {
  if [ "${SHARED_HARDHAT_PRE_PUSH_TEST:-1}" = "0" ]; then
    echo "${YELLOW}Skipping Hardhat test run (set SHARED_HARDHAT_PRE_PUSH_TEST=1 to re-enable).${NC}"
    return 0
  fi

  if ! command -v npx >/dev/null 2>&1; then
    echo "${YELLOW}Skipping Hardhat test run: npx not available.${NC}"
    return 0
  fi

  if [ ! -d "test" ]; then
    echo "${YELLOW}Skipping Hardhat test run: no test directory detected.${NC}"
    return 0
  fi

  if [ -n "${SHARED_HARDHAT_PRE_PUSH_TEST_CMD:-}" ]; then
    echo "Running custom pre-push test command..."
    if sh -c "${SHARED_HARDHAT_PRE_PUSH_TEST_CMD}"; then
      return 0
    fi
    echo "${RED}Custom pre-push test command failed.${NC}"
    return 1
  fi

  echo "Running Hardhat tests..."
  if npx hardhat test; then
    return 0
  fi

  echo "${RED}Hardhat tests failed. Fix issues or set SHARED_HARDHAT_PRE_PUSH_TEST=0 to skip this step.${NC}"
  return 1
}

run_slither_if_required() {
  case "$BRANCH" in
    main|master|develop)
      ;;
    *)
      echo "${YELLOW}Skipping Slither run on branch $BRANCH.${NC}"
      return 0
      ;;
  esac

  if [ -f "$SHARED_DIR/scripts/analysis/slither.ts" ]; then
    run_ts_node_script "$SHARED_DIR/scripts/analysis/slither.ts" --fail-on-high && return 0
    status=$?
    if [ "$status" -eq 127 ]; then
      echo "${YELLOW}ts-node not available; falling back to slither CLI if installed.${NC}"
    else
      return $status
    fi
  fi

  if command -v slither >/dev/null 2>&1; then
    echo "Running Slither security analysis..."
    if slither . --fail-high 2>/dev/null; then
      return 0
    fi
    echo "${RED}High severity security issues found by Slither. Resolve them before pushing.${NC}"
    return 1
  fi

  echo "${YELLOW}Slither not installed; skipping security analysis.${NC}"
  return 0
}

run_deploy_id_sanity() {
  if [ "${SHARED_HARDHAT_PRE_PUSH_DEPLOY_IDS:-1}" = "0" ]; then
    echo "${YELLOW}Skipping deploy ID sanity check (set SHARED_HARDHAT_PRE_PUSH_DEPLOY_IDS=1 to re-enable).${NC}"
    return 0
  fi

  tmp_report=$(mktemp 2>/dev/null || printf '%s' "/tmp/deploy-ids-$$.json")
  cleanup() {
    rm -f "$tmp_report" 2>/dev/null || true
  }

  trap cleanup EXIT

  if [ -f "$SHARED_DIR/scripts/deployments/find-hardcoded-deploy-ids.ts" ]; then
    echo "Running deploy ID sanity check..."
    if run_ts_node_script "$SHARED_DIR/scripts/deployments/find-hardcoded-deploy-ids.ts" --report "$tmp_report"; then
      trap - EXIT
      cleanup
      return 0
    fi
    status=$?
    if [ "$status" -ne 127 ]; then
      trap - EXIT
      cleanup
      return $status
    fi
    echo "${YELLOW}ts-node not available; attempting npm fallback for deploy ID check.${NC}"
  fi

  if command -v npm >/dev/null 2>&1 && node -e "const pkg=require('./package.json');process.exit(pkg && pkg.scripts && pkg.scripts['sanity:deploy-ids'] ? 0 : 1)"; then
    echo "Running npm deploy ID sanity check..."
    if npm run sanity:deploy-ids -- --report "$tmp_report"; then
      trap - EXIT
      cleanup
      return 0
    fi
    trap - EXIT
    cleanup
    echo "${RED}Deploy ID sanity check failed.${NC}"
    return 1
  fi

  trap - EXIT
  cleanup
  echo "${YELLOW}No deploy ID sanity checker configured; skipping.${NC}"
  return 0
}

run_compile() {
  if [ "${SHARED_HARDHAT_PRE_PUSH_COMPILE:-1}" = "0" ]; then
    echo "${YELLOW}Skipping Hardhat compile (set SHARED_HARDHAT_PRE_PUSH_COMPILE=1 to re-enable).${NC}"
    return 0
  fi

  if ! command -v npx >/dev/null 2>&1; then
    echo "${YELLOW}Skipping Hardhat compile: npx not available.${NC}"
    return 0
  fi

  if [ ! -f "hardhat.config.ts" ] && [ ! -f "hardhat.config.js" ] && [ ! -f "hardhat.config.cjs" ] && [ ! -f "hardhat.config.mjs" ]; then
    echo "${YELLOW}Skipping Hardhat compile: config not found in repository root.${NC}"
    return 0
  fi

  echo "Running Hardhat compile..."
  if npx hardhat compile; then
    return 0
  fi

  echo "${RED}Hardhat compile failed. Fix issues or set SHARED_HARDHAT_PRE_PUSH_COMPILE=0 to skip this step.${NC}"
  return 1
}

check_sensitive_information() {
  staged=$(git diff --cached --name-only || true)
  if [ -z "$staged" ]; then
    return 0
  fi

  potential_keys=0
  while IFS= read -r file; do
    [ -z "$file" ] && continue
    if [ ! -f "$file" ]; then
      continue
    fi
    if grep -E "0x[a-fA-F0-9]{64}" "$file" 2>/dev/null; then
      potential_keys=1
      break
    fi
  done <<EOF
$staged
EOF

  if [ "$potential_keys" -ne 0 ]; then
    echo "${RED}Potential private key detected in staged files!${NC}"
    echo "${YELLOW}If this is a test key, please move it to an environment file instead.${NC}"
    return 1
  fi

  env_file_committed=0
  while IFS= read -r file; do
    [ -z "$file" ] && continue
    case "$file" in
      *.env|*.env.*)
        case "$file" in
          *.env.example)
            ;;
          *)
            env_file_committed=1
            ;;
        esac
        ;;
    esac
  done <<EOF
$staged
EOF

  if [ "$env_file_committed" -ne 0 ]; then
    echo "${RED}Attempting to commit an .env file! This should never be committed.${NC}"
    return 1
  fi

  api_warning=0
  pattern='(api[_-]?key|apikey|api_secret|api[_-]?token)'
  while IFS= read -r file; do
    [ -z "$file" ] && continue
    if [ ! -f "$file" ]; then
      continue
    fi
    matches=$(grep -iE "$pattern" "$file" 2>/dev/null || true)
    if [ -z "$matches" ]; then
      continue
    fi
    filtered=$(printf '%s
' "$matches" | grep -vE '^\s*(#|//)' || true)
    if [ -n "$filtered" ]; then
      api_warning=1
      break
    fi
  done <<EOF
$staged
EOF

  if [ "$api_warning" -ne 0 ]; then
    echo "${YELLOW}Warning: Potential API key detected. Double-check before pushing.${NC}"
  fi

  return 0
}

echo "Running shared pre-push checks..."

if ! run_guardrails; then
  echo "${RED}Shared guardrail checks failed.${NC}"
  exit 1
fi

if ! run_deploy_id_sanity; then
  exit 1
fi

if ! run_compile; then
  exit 1
fi

if ! run_tests_if_opt_in; then
  exit 1
fi

if ! run_slither_if_required; then
  exit 1
fi

if ! check_sensitive_information; then
  exit 1
fi

echo "${GREEN}Pre-push checks passed!${NC}"
exit 0
